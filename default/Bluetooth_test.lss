
Bluetooth_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003d  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e7  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000083  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012f  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c6  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9c:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <USART_Init>:
#include <math.h>

void USART_Init(unsigned int ubrr)
{
 /* Set baud rate - 9600 */
 UBRR0H = (unsigned char) (ubrr>>8);
  a4:	90 93 90 00 	sts	0x0090, r25
 UBRR0L = (unsigned char) ubrr;
  a8:	89 b9       	out	0x09, r24	; 9
 
 /* Enable receiver and transmitter */
 UCSR0B = (1<<RXEN)|(1<<TXEN);
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
 /* Set frame format: 8-bit data, 1 stop bit */
 UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 95 00 	sts	0x0095, r24
}
  b4:	08 95       	ret

000000b6 <USART_Transmit>:

void USART_Transmit(char data)
{
 /* Wait for empty transmit buffer */
 while ( !( UCSR0A & (1<<UDRE0)) );
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Transmit>
 /* Put data into buffer, sends the data */
 UDR0 = data;
  ba:	8c b9       	out	0x0c, r24	; 12
}
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
 USART_Init(MYUBRR);
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_Init>
 
 /* Replace with your application code */
 while (1) {
  
  USART_Transmit(75);
  c6:	8b e4       	ldi	r24, 0x4B	; 75
  c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Transmit>
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <main+0x8>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
