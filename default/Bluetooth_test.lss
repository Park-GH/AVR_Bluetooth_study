
Bluetooth_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000033  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a9  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001da  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000112  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <rx_char>:
#include <avr/io.h>
#include <util/delay.h>
 
char rx_char(void)
{
    while(!(UCSR1A & 0x80));
  a4:	80 91 9b 00 	lds	r24, 0x009B
  a8:	87 ff       	sbrs	r24, 7
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <rx_char>
    return UDR1;
  ac:	80 91 9c 00 	lds	r24, 0x009C
}
  b0:	08 95       	ret

000000b2 <tx_char>:
 
void tx_char(uint8_t bData)
{
    while((UCSR1A&0x20) == 0)
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <tx_char+0x6>
    UDR1 = bData;    
  b4:	80 93 9c 00 	sts	0x009C, r24
    return UDR1;
}
 
void tx_char(uint8_t bData)
{
    while((UCSR1A&0x20) == 0)
  b8:	90 91 9b 00 	lds	r25, 0x009B
  bc:	95 ff       	sbrs	r25, 5
  be:	fa cf       	rjmp	.-12     	; 0xb4 <tx_char+0x2>
    UDR1 = bData;    
}
  c0:	08 95       	ret

000000c2 <main>:
 
 int main(void)
 {
    uint8_t bData = 'A';
    
    UCSR1A=0x00; //flag 레지스터를 사용하지 않음
  c2:	10 92 9b 00 	sts	0x009B, r1
    UCSR1B=0x18; //수신 enable, 송신 enable, 전송비트 8bit
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 9a 00 	sts	0x009A, r24
    UCSR1C=0x06; //비동기식 통신
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	80 93 9d 00 	sts	0x009D, r24
    UBRR1H=0;
  d2:	10 92 98 00 	sts	0x0098, r1
    UBRR1L=103; //9600bps
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	80 93 99 00 	sts	0x0099, r24
     
    /* Replace with your application code */
    while (1)
    {
        tx_char(bData);
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <tx_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	97 ea       	ldi	r25, 0xA7	; 167
  e6:	a1 e6       	ldi	r26, 0x61	; 97
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x26>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x30>
  f2:	00 00       	nop
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <main+0x1a>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
